ylim = c(0, 0.05)
)
sort(amostra)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
amostra = rnorm(n, media, dp)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
sort(amostra)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
n = 1000
amostra = rnorm(n, media, dp)
sort(amostra)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
amostra = rnorm(n, media, dp)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
amostra = rnorm(n, media, dp)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
amostra = rnorm(n, media, dp)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
amostra = rnorm(n, media, dp)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
n = 16
amostra = rnorm(n, media, dp)
sort(amostra)
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
x= y
x = amostra
curve(dnorm(x, media, sqrt(sigma2)), # Curva normal te?rica
from = min(amostra), to=max(amostra),
add=T)
add=T)
curve(dnorm(x, media, dp), # Curva normal te?rica
from = min(amostra), to=max(amostra),
add=T)
curve(dnorm(x, media, dp), # Curva normal te?rica
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição amostral de X")
legend('topright', legend = "Distribuição amostral de X representada pela curva")
legend('topright', legend = "Distribuição amostral de X /n representada pela curva")
legend('topright', legend = "Distribuição amostral de X \n representada pela curva")
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição amostral de X \n representada pela curva")
#c)
media = 500
dp = 10
n = 16
amostra = rnorm(n, media, dp)
sort(amostra)
x = amostra
amostra = sort(amostra)
x = amostra
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05)
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição amostral de X \n representada pela curva")
legend('topright', legend = "Distribuição populacional de X \n representada pela curva")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução amostral de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição populacional de X \n representada pela curva")
legend('topright', legend = "Distribuição de X \n representada pela curva")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução amostral de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X \n representada pela curva")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução amostral de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X \n representada pela curva",lty=1, col=2, lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução amostral de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
curve(dnorm(x, mean(y), ds(y)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
curve(dnorm(x, mean(amostra), ds(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
curve(dnorm(x, mean(amostra), sd(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
legend('topright', legend = "Distribuição de X barra",lty=1, col=2, lwd=2, bty="n")
legend('topright', legend = "Distribuição de X barra",lty=1, col=1, lwd=2, bty="n")
2
legend('topright', legend = "Distribuição de X barra",lty=1, col=2, lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
curve(dnorm(x, mean(amostra), sd(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
legend('bottomright', legend = "Distribuição de X barra",lty=1, col=2, lwd=2, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=1, col=3, lwd=2, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=1, col="blue", lwd=2, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=1, col="blue", lwd=3, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=1, col="blue", lwd=2)
legend('bottomright', legend = "Distribuição de X barra",lty=1, col="blue", lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
curve(dnorm(x, mean(amostra), sd(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
legend('bottomright', legend = "Distribuição de X barra",lty=1, col="blue", lwd=2, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=2, col="blue", lwd=2, bty="n")
legend('bottomright', legend = "Distribuição de X barra",lty=5, col="blue", lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
curve(dnorm(x, mean(amostra), sd(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
legend('bottomright', legend = "Distribuição de X barra",lty=5, col="blue", lwd=2, bty="n")
legend('topright', legend = "Distribuição de X",lty=5, col=2, lwd=2, bty="n")
legend('topright', legend = "Distribuição de X",lty=5, col=2, lwd=2, bty="n")
legend('topright', legend = "Distribuição de X",lty=5, col=2, lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=5, col=2, lwd=2, bty="n")
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
legend('topright', legend = "Distribuição de X",lty=1, col=2, lwd=2, bty="n")
legend('topright', legend = c("Distribuição de X", "Distribuição de X barra"),lty=1, col=c('red','blue'), lwd=2, bty="n")
hist(amostra ,main = "Distribuição amostral",
freq = FALSE,
ylim = c(0, 0.05),
xlab = "distribução de X barra",
ylab = "densidade"
)
curve(dnorm(x, media, dp),
from = min(amostra), to=max(amostra),
add=T, col = 'red')
curve(dnorm(x, mean(amostra), sd(amostra)),
from = min(amostra), to=max(amostra),
add=T, col = 'blue')
legend('topright', legend = c("Distribuição de X", "Distribuição de X barra"),lty=1, col=c('red','blue'), lwd=2, bty="n")
dados.discretos = c(1,0,1,1) # Tr?s 1?s: Homens e Um 0: Mulher
# Tabelas de frequ?ncias absolutas e relativas
homens.tab.abs = table(dados.discretos)
homens.tab.abs
plot(homens.tab.abs) # Gr?fico para vari?veis discretas
# Acrescentando 'label' ?s categorias do objeto table
str(homens.tab.abs)
names(homens.tab.abs) = list('Mulher', 'Homem')
plot(homens.tab.abs,
xlab = 'G?nero',
ylab = 'Freq.') # Gr?fico para vari?veis discretas
homens.tab.rel = prop.table(homens.tab.abs)
homens.tab.rel
plot(homens.tab.rel,
xlab = 'G?nero',
ylab = '%',
ylim = c(0,1)) # Gr?fico para vari?veis discretas
### Questão 10
#c)
#P(Z>0):
pnorm(0)
set.seed(2)
x = rnorm(10000,mean=0.1,sd=0.09/100)
hist(x,col = "lightblue", xlab="proporção",ylab="amostra",freq=F,main = "Histograma da proporção amostral")
lines(density(x),col="black",lwd=3)
lines(density(x),col="black",lwd=3)
x = rnorm(10000,mean=0.1,sd=0.09/100)
hist(x,col = "lightblue", xlab="proporção",ylab="densidade",freq=F,main = "Histograma da proporção amostral")
lines(density(x),col="black",lwd=3)
?set.seed
hist(x, xlab="proporção",ylab="defeituosos",main = "Histograma da proporção amostral")
x = rnorm(1000,mean=0.1,sd=0.09/100)
hist(x, xlab="proporção",ylab="defeituosos",main = "Histograma da proporção amostral")
hist(x, xlab="proporção",ylab="defeituosos", freq = "F", main = "Histograma da proporção amostral")
x = rnorm(1000,mean=0.1,sd=0.09/100)
hist(x, xlab="proporção",ylab="defeituosos", freq = "F", main = "Histograma da proporção amostral")
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
lines(density(x),col="black",lwd=3)
x = rnorm(1000,mean=0.1,sd=0.09/100)
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
x = rnorm(1000,mean=0.1,sd=0.09/100)
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
x = rnorm(1000,mean=0.1,sd=0.09/100)
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
lines(density(x),col="black",lwd=3)
lines(density(x),col="blue",lwd=1)
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
lines(density(x),col="blue",lwd=1)
#aproximada
curve(dnorm(0.10, 0.09/100))
#aproximada
curve(dnorm(0.10, 0.09/100),  from = min(amostra), to=max(amostra),
add=T, col = 'blue')
#aproximada
curve(dnorm(0.10, 0.09/100),  from = min(x), to=max(x),
add=T, col = 'blue')
#aproximada
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
#exata
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximada
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
x = rnorm(1000,mean=0.1,sd=0.09/100)
#exata
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
x = rnorm(10000,mean=0.1,sd=0.09/100)
#exata
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximada
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
x = rnorm(10000,mean=0.1,sd=0.09/100)
pnorm(0)
x = rnorm(1000,mean=0.1,sd=0.09/100)
#exata
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximacao usando a normal
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
x = rnorm(1000,mean=0.1,sd=0.09/100)
#exata
hist(x, xlab="proporção",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximacao usando a normal
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
legend('topright', legend = "Distribuição aproximada definida pela normal", ty=1, col='blue', lwd=2, bty="n")
legend('topright', legend = "Distribuição aproximada definida pela normal", ty=2, col='blue', lwd=2, bty="n")
legend('topright', legend = "Distribuição aproximada \n definida pela normal", ty=2, col='blue', lwd=2, bty="n")
legend('topright', legend = "Distribuição aproximada \n definida pela normal", ty=1, col='blue', lwd=2, bty="n")
legend('topright', legend = c("Distribuição aproximada \n definida pela normal"), ty=1, col='blue', lwd=2, bty="n")
legend('topright', legend = "Distribuição aproximada \n definida pela normal", lty=1, col='blue', lwd=2, bty="n")
#exata
hist(x, xlab="distribuição exata",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximacao usando a normal
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
legend('topright', legend = "Distribuição aproximada \n definida pela normal", lty=1, col='blue', lwd=2, bty="n")
x = rnorm(1000,mean=0.1,sd=0.09/100)
#exata
hist(x, xlab="distribuição exata",ylab="defeituosos", freq = F, main = "Histograma da proporção amostral")
#aproximacao usando a normal
curve(dnorm(x,0.10, 0.09/100),
from = min(x), to=max(x),
add=T, col = 'blue')
legend('topright', legend = "Distribuição aproximada \n definida pela normal", lty=1, col='blue', lwd=2, bty="n")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("labeling")
library(tidyverse)
library(tidyverse)
library(tidyverse)
install.packages("tidyverse")
library("tidyverse")
library(labeling)
detach("package:labeling", unload = TRUE)
library(ggplot2)
library(tidyverse)
#O modelo escolhido em primeiro momento para fazer essas predicoes foi o modelo de regressao.
#Esse eh o modelo mais recomendado quando vamos prever grandezas quantitavas continuas como a
#eficiencia do combustivel em um determinado veiculo que seria algo como kilometros por litros,
#milhas por galao, etc
install.packages("tidyverse")
library(tidyverse)
#                      Informando as bibliotecas que serao usadas
library(tidyverse)
library(cowplot)
library(tidymodels)
#                       Lendo os dados que serao usados
setwd("/home/paulo/Documentos/estudo\ de\ machine\ learning/capitulo\ 1/")
carros2018 <- read_csv("data/cars2018.csv")
# plot01
ggplot(carros2018, aes(x = mpg)) +
geom_histogram(bins = 25) +
labs(x = "Milhas por galão (eficiencia/mpg)",
y = "Numero de carros")
# Criando um df sem as informacoes de index e modelos dos carros pois essas informacoes sao
#irrelavantes
carros_semIndex_semModelo <- carros2018 %>%
select(-model, -model_index)
rm(carros2018)
# Guardando na variavel o resultado do treinamento do modelo
fit_all <- lm(mpg ~ ., data = carros_semIndex_semModelo)
# printando um sumario do modelo
summary(fit_all)
rm(fit_all)
#As seguintes linhas de codigo sao para ajuste dos dados do dataframe.
#Precisamos transformar alguns dados das colunas em factors e precisamos ajustar a coluna de mpg
#para log visto que o histograma do mpg gerou uma distribuicao normal
cols <- c('transmission', 'aspiration', 'lockup_torque_converter', 'drive', 'recommended_fuel',
'fuel_injection')
carros_semIndex_semModelo[cols] <- lapply(carros_semIndex_semModelo[cols], factor)
carros_semIndex_semModelo <- carros_semIndex_semModelo %>%
mutate(mpg = log(mpg))
rm(cols)
#settando uma semente de aleatoriedade para que o split gere sempre os mesmos dados
set.seed(1234)
#Essa linha de codigo inicializa a divisao dos conjuntos de dados em duas partes que serao
#usadas para treino e test. 80% dos dados do conjunto sao dados de treino e 20% sao dados
#para testes
carros_split <- carros_semIndex_semModelo %>%
initial_split(prop=0.8, strata = transmission)
# Aqui eh atribuido a duas variaveis os cojuntos de dados de testes e treino, respectivamente.
carros_treino <- training(carros_split)
carros_teste <- testing(carros_split)
rm(carros_split, carros_semIndex_semModelo)
# Indicando qual o tipo de modelo sera usado no treinamento
lm_mod <- linear_reg() %>%
set_engine("lm")
# Realizando o treinamento
fit_lm <- lm_mod %>%
fit(log(mpg) ~ .,
data = carros_treino)
# Definindo o tipo do modelo
rf_mod <- rand_forest() %>%
set_engine("randomForest") %>%
set_mode("regression")
# Realizando o treinamento
fit_rf <- rf_mod %>%
fit(log(mpg) ~ .,
data = carros_treino)
# criando novas colunas no dataframe com os dados da predicao
resultadosTreino <- carros_treino    %>%
mutate(mpg = log(mpg)) %>%
bind_cols(predict(fit_lm, carros_treino) %>%
rename(.pred_lm = .pred)) %>%
bind_cols(predict(fit_rf, carros_treino) %>%
rename(.pred_rf = .pred))
# Settando graficos que mostram a eficiencia dos modelos
p1 <- ggplot(data = resultadosTreino, aes(mpg, .pred_lm)) +
ggtitle("LM") +
geom_abline(lty = 2, color = "gray50") +
geom_point(color = "red") +
geom_smooth(method = "lm")
p2 <- ggplot(data = resultadosTreino, aes(mpg, .pred_rf)) +
ggtitle("RF") +
geom_abline(lty = 2, color = "gray50") +
geom_point(color = "orange") +
geom_smooth(method = "lm")
#plot02
title <- ggdraw() +
draw_label(
"Avaliacao dos modelos sobre os dados de treino",
fontface = 'bold',
x = 0,
hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_grid(title,plot_grid(p1, p2),ncol = 1, rel_heights = c(0.1, 1))
metrics(resultadosTreino, truth =  mpg, estimate = .pred_lm )
metrics(resultadosTreino, truth =  mpg, estimate = .pred_rf )
resultadosTeste <- carros_teste %>%
mutate(mpg = log(mpg)) %>%
bind_cols(predict(fit_lm, carros_teste)%>%
rename(.pred_lm = .pred))%>%
bind_cols(predict(fit_rf, carros_teste) %>%
rename(.pred_rf = .pred))
# Settando graficos que mostram a eficiencia dos modelos
p1 <- ggplot(data = resultadosTeste, aes(mpg, .pred_lm)) +
ggtitle("LM") +
geom_abline(lty = 2, color = "gray50") +
geom_point(color = "red") +
geom_smooth(method = "lm")
p2 <- ggplot(data = resultadosTeste, aes(mpg, .pred_rf)) +
ggtitle("RF") +
geom_abline(lty = 2, color = "gray50") +
geom_point(color = "orange") +
geom_smooth(method = "lm")
#plot03
title <- ggdraw() +
draw_label(
"Avaliacao dos modelos sobre os dados de teste",
fontface = 'bold',
x = 0,
hjust = 0) +
theme(plot.margin = margin(0, 0, 0, 7))
plot_grid(title,plot_grid(p1, p2),ncol = 1, rel_heights = c(0.1, 1))
rm(title,p1,p2, fit_lm, fit_rf, carros_teste, resultadosTeste, resultadosTreino)
carros_boot <- bootstraps(carros_treino)
# Settando modelo de regressao linear
lm_res <- lm_mod %>%
fit_resamples(
log(mpg) ~ .,
resamples = carros_boot,
control = control_resamples(save_pred = TRUE)
)
# Settando mode de random forest
rf_res <- rf_mod %>%
fit_resamples(
log(mpg) ~ .,
resamples = carros_boot,
control = control_resamples(save_pred = TRUE)
)
# Prevendo os dados e salvando em resultadosBoots
resultadosBoots <- bind_rows(lm_res %>%
collect_predictions() %>%
mutate(model = "lm"),
rf_res %>%
collect_predictions() %>%
mutate(model = "rf"))
#plot04
resultadosBoots %>%
ggplot(aes(`log(mpg)`, .pred)) +
geom_abline(lty = 2, color = "gray50") +
geom_point(aes(color = id), size = 1.5, alpha = 0.3, show.legend = FALSE) +
geom_smooth(method = "lm") +
facet_wrap(~ model)
